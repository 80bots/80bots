version: '3'
services:

  # Nginx proxy server
  # Image: https://hub.docker.com/_/nginx
  proxy:
    image: nginx
    container_name: 80bots-proxy
    restart: unless-stopped
    ports:
      - "${DOCKER_FRONTEND_SERVER_PORT:-80}:${DOCKER_FRONTEND_SERVER_PORT:-80}"
      - "${DOCKER_BACKEND_SERVER_PORT:-8080}:${DOCKER_BACKEND_SERVER_PORT:-8080}"
      - "${DOCKER_SOCKET_SERVER_PORT:-6001}:${DOCKER_SOCKET_SERVER_PORT:-6001}"
    environment:
      FRONTEND_SERVER_HOST: "${DOCKER_FRONTEND_SERVER_HOST:-localhost}"
      FRONTEND_SERVER_PORT: "${DOCKER_FRONTEND_SERVER_PORT:-80}"
      BACKEND_SERVER_HOST: "${DOCKER_BACKEND_SERVER_HOST:-localhost}"
      BACKEND_SERVER_PORT: "${DOCKER_BACKEND_SERVER_PORT:-8080}"
      SOCKET_SERVER_HOST: "${DOCKER_SOCKET_SERVER_HOST:-localhost}"
      SOCKET_SERVER_PORT: "${DOCKER_SOCKET_SERVER_PORT:-6001}"
    command: /bin/bash -c "envsubst < /etc/nginx/http-server.template.conf > /etc/nginx/conf.d/http-server.conf && exec nginx -g 'daemon off;'"
    volumes:
      - ./backend:/var/www
      - ./docker-compose/proxy/http-server.template.conf:/etc/nginx/http-server.template.conf
      - ./docker-compose/proxy/src:/etc/nginx/src
      - ./docker-compose/proxy/conf.d:/etc/nginx/conf.d
    links:
      - backend
      - ws
      - frontend
    depends_on:
      - backend
      - ws
      - frontend
    networks:
      - app-network

  # Ngrok
  # Image: https://hub.docker.com/r/wernight/ngrok/
  ngrok:
    build:
      context: ./docker-compose/ngrok
      args:
        NGROK_AUTH: "${NGROK_AUTH}"
        FRONTEND_SUBDOMAIN: "${FRONTEND_SUBDOMAIN:-frontend-80bots}"
        BACKEND_SUBDOMAIN: "${BACKEND_SUBDOMAIN:-backend-80bots}"
        WS_SUBDOMAIN: "${WS_SUBDOMAIN:-ws-80bots}"
    container_name: 80bots-tunnel
    command: "ngrok start --all"
    restart: unless-stopped
    ports:
      - "4040:4040"
    links:
      - proxy
    depends_on:
      - proxy
    networks:
      - app-network

  # Frontend
  # Image: ./docker-compose/frontend/Dockerfile
  frontend:
    container_name: 80bots-frontend
    build:
      context: ./docker-compose/frontend
    environment:
      NODE_ENV: "${APP_ENV:-local}"
      PORT: "8000"
      API_URL: "${APP_URL:-http://localhost:8080}/api"
      SOCKET_URL: "${WS_URL:-http://localhost:80}"
      SOCKET_AUTH_URL: "${APP_URL:-http://localhost:8080}}/broadcasting/auth"
    restart: unless-stopped
    volumes:
      - ./frontend:/var/www
    networks:
      - app-network
    depends_on:
      - backend
      - ws

  # Backend
  # Image: ./docker-compose/backend/Dockerfile
  backend:
    container_name: 80bots-backend
    build:
      context: ./docker-compose/backend
    restart: unless-stopped
    env_file:
      - .env
    links:
      - redis
      - mysql
    depends_on:
      - redis
      - mysql
    volumes:
      - ./backend:/var/www
      - ./docker-compose/backend/supervisor:/etc/supervisor
    networks:
      - app-network

  # Web Sockets based on Laravel Echo Server
  # Image: https://hub.docker.com/r/oanhnn/laravel-echo-server
  ws:
    build:
      context: ./docker-compose/ws
      args:
        AUTH_HOST: "${APP_URL:-http://localhost:8080}"
        AUTH_ENDPOINT: "/broadcasting/auth"
        REDIS_HOST: "${REDIS_HOST:-redis}"
        REDIS_PORT: "${REDIS_PORT:-6379}"
        REDIS_PASSWORD: "${REDIS_PASSWORD:-root}"
        APP_DEBUG: "${APP_DEBUG:-true}"
    container_name: 80bots-ws
    restart: unless-stopped
    volumes:
      - ./docker-compose/ws/conf.d:/app
    links:
      - redis
    depends_on:
      - redis
    networks:
      - app-network

  # Primary DB - MySQL
  # Image: https://hub.docker.com/_/mysql
  mysql:
    image: mysql:5.7
    container_name: 80bots-mysql
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: "${DOCKER_MYSQL_ROOT_PASSWORD:-root}"
      MYSQL_USER: "${DOCKER_MYSQL_USER:-user}"
      MYSQL_PASSWORD: "${DOCKER_MYSQL_PASSWORD:-user}"
      MYSQL_DATABASE: "${DOCKER_MYSQL_DATABASE:-80bots}"
    ports:
      - "3306:3306"
    volumes:
      - ./docker-compose/mysql/conf.d:/etc/mysql/conf.d/
      - ./docker-compose/mysql/data:/var/lib/mysql
    networks:
      - app-network

  # Redis
  # Image: https://hub.docker.com/_/redis/
  redis:
    build:
      context: ./docker-compose/redis
    container_name: 80bots-redis
    restart: unless-stopped
    volumes:
      - ./docker-compose/redis/data:/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge