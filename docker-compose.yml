version: '3'
services:

  # Nginx proxy server
  # Image: https://hub.docker.com/_/nginx
  proxy:
    image: nginx
    container_name: 80bots-proxy
    restart: unless-stopped
    ports:
      - "${WEB_SERVER_PORT}:${WEB_SERVER_PORT}"
      - "${API_SERVER_PORT}:${API_SERVER_PORT}"
      - "${SOCKET_SERVER_PORT}:${SOCKET_SERVER_PORT}"
    environment:
      WEB_SERVER_HOST: "${WEB_SERVER_HOST}"
      WEB_SERVER_PORT: "${WEB_SERVER_PORT}"
      API_SERVER_HOST: "${API_SERVER_HOST}"
      API_SERVER_PORT: "${API_SERVER_PORT}"
      SOCKET_SERVER_HOST: "${SOCKET_SERVER_HOST}"
      SOCKET_SERVER_PORT: "${SOCKET_SERVER_PORT}"
    command: /bin/bash -c "envsubst < /etc/nginx/src/http-server.template.conf > /etc/nginx/conf.d/http-server.conf && exec nginx -g 'daemon off;'"
    volumes:
      - ./docker-compose/proxy/src:/etc/nginx/src
      - ./docker-compose/proxy/conf.d:/etc/nginx/conf.d
    links:
      - web
      - api
      - ws
    depends_on:
      - api
      - web
      - ws
    networks:
      - app-network

  # React Web Client
  # Image: ./docker-compose/web/Dockerfile
  web:
    container_name: 80bots-web
    build:
      context: ./docker-compose/web
    command: /var/www/start.sh
    restart: unless-stopped
    volumes:
      - ./docker-compose/web/app:/var/www/app
    networks:
      - app-network
    depends_on:
      - api
      - ws

  # API
  # Image: ./docker-compose/api/Dockerfile
  api:
    container_name: 80bots-api
    build:
      context: ./docker-compose/backend
    command: /var/www/start.sh
    restart: unless-stopped
    volumes:
      - ./docker-compose/backend/app:/var/www/app
      - ./docker-compose/backend/supervisor:/etc/supervisor
    links:
      - mysql
      - redis
    networks:
      - app-network
    depends_on:
      - mysql
      - redis
      - ws
      - mongodb
  mongodb:
    image: mongo
    container_name: 80bots-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - app-network
  # Web Sockets based on Laravel Echo Server
  # Image: https://hub.docker.com/r/oanhnn/laravel-echo-server
  ws:
    image: oanhnn/laravel-echo-server
    container_name: 80bots-ws
    restart: unless-stopped
    environment:
      LARAVEL_ECHO_SERVER_DB: "${LARAVEL_ECHO_SERVER_DB}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_KEY_PREFIX: "${REDIS_KEY_PREFIX}"
      REDIS_DB_BACKEND: "${REDIS_DB_BACKEND}"
      LARAVEL_ECHO_SERVER_AUTH_HOST: "${API_URL}"
      LARAVEL_ECHO_SERVER_HOST: "0.0.0.0"
      LARAVEL_ECHO_SERVER_PORT: "8000"
      LARAVEL_ECHO_SERVER_DEBUG: "${LARAVEL_ECHO_SERVER_DEBUG}"
    volumes:
      - ./docker-compose/ws/conf.d:/app
    links:
      - redis
    depends_on:
      - redis
    networks:
      - app-network

  # Primary DB - MySQL
  # Image: https://hub.docker.com/_/mysql
  mysql:
    image: mysql:5.7
    container_name: 80bots-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
    volumes:
      - ./docker-compose/mysql/conf.d:/etc/mysql/conf.d/
      - ./docker-compose/mysql/data:/var/lib/mysql
    networks:
      - app-network

  # Redis
  # Image: https://hub.docker.com/_/redis/
  redis:
    build:
      context: ./docker-compose/redis
    container_name: 80bots-redis
    restart: unless-stopped
    volumes:
      - ./docker-compose/redis/data:/data
    networks:
      - app-network
networks:
  app-network:
    driver: bridge